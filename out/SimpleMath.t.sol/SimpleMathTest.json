{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "log_address",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "val",
          "type": "uint256[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "val",
          "type": "int256[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "val",
          "type": "address[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "log_bytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "log_bytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "name": "log_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "log_named_address",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "val",
          "type": "uint256[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "val",
          "type": "int256[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "val",
          "type": "address[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "val",
          "type": "bytes"
        }
      ],
      "name": "log_named_bytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "val",
          "type": "bytes32"
        }
      ],
      "name": "log_named_bytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "val",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "log_named_decimal_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "log_named_decimal_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "val",
          "type": "int256"
        }
      ],
      "name": "log_named_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "val",
          "type": "string"
        }
      ],
      "name": "log_named_string",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        }
      ],
      "name": "log_named_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "log_string",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "log_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "logs",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "IS_TEST",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addNumbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "excludeArtifacts",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "excludedArtifacts_",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "excludeContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "excludedContracts_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "excludeSenders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "excludedSenders_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "failed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "simpleMath",
      "outputs": [
        {
          "internalType": "contract SimpleMath",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetArtifactSelectors",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct StdInvariant.FuzzSelector[]",
          "name": "targetedArtifactSelectors_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetArtifacts",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "targetedArtifacts_",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "targetedContracts_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetSelectors",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct StdInvariant.FuzzSelector[]",
          "name": "targetedSelectors_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetSenders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "targetedSenders_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testFail_addNumbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testFail_doubleNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testVariable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "test_doubleNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x608060405260008054600160ff19918216811790925560048054909116909117905534801561002d57600080fd5b506110448061003d6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806385226c81116100a2578063ba414fa611610071578063ba414fa6146101a2578063e0ab58b4146101ba578063e20c9f71146101e5578063e42429ae146101ed578063fa7626d41461020457600080fd5b806385226c8114610175578063916a17c61461018a578063b5508aa914610192578063b7c86b171461019a57600080fd5b80633f7286f4116100de5780633f7286f4146101485780635715703e1461015057806366d9a9a01461015857806369c113e11461016d57600080fd5b80630a9254e4146101105780631ed7831c1461011a5780632373fe64146101385780633e5e3c2314610140575b600080fd5b610118610211565b005b610122610264565b60405161012f9190610bea565b60405180910390f35b6101186102c6565b61012261033f565b61012261039f565b6101186103ff565b610160610439565b60405161012f9190610c37565b610118610528565b61017d610562565b60405161012f9190610d0e565b610160610632565b61017d610718565b6101186107e8565b6101aa61081b565b604051901515815260200161012f565b601b546101cd906001600160a01b031681565b6040516001600160a01b03909116815260200161012f565b610122610946565b6101f6601c5481565b60405190815260200161012f565b6000546101aa9060ff1681565b600a60405161021f90610bdd565b908152602001604051809103906000f080158015610241573d6000803e3d6000fd5b50601b80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600d8054806020026020016040519081016040528092919081815260200182805480156102bc57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161029e575b5050505050905090565b601b546040516334c29b2160e21b81526005600482015261033d916001600160a01b03169063d30a6c84906024015b602060405180830381865afa158015610312573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103369190610d88565b60146109a6565b565b6060600f8054806020026020016040519081016040528092919081815260200182805480156102bc576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161029e575050505050905090565b6060600e8054806020026020016040519081016040528092919081815260200182805480156102bc576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161029e575050505050905090565b601b5460405163ef9fc50b60e01b8152600560048201819052602482015261033d916001600160a01b03169063ef9fc50b906044016102f5565b60606012805480602002602001604051908101604052809291908181526020016000905b8282101561051f5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561050757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104c95790505b5050505050815250508152602001906001019061045d565b50505050905090565b601b5460405163ef9fc50b60e01b8152600a60048201819052602482015261033d916001600160a01b03169063ef9fc50b906044016102f5565b60606011805480602002602001604051908101604052809291908181526020016000905b8282101561051f5783829060005260206000200180546105a590610da1565b80601f01602080910402602001604051908101604052809291908181526020018280546105d190610da1565b801561061e5780601f106105f35761010080835404028352916020019161061e565b820191906000526020600020905b81548152906001019060200180831161060157829003601f168201915b505050505081526020019060010190610586565b60606013805480602002602001604051908101604052809291908181526020016000905b8282101561051f5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561070057602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106c25790505b50505050508152505081526020019060010190610656565b60606010805480602002602001604051908101604052809291908181526020016000905b8282101561051f57838290600052602060002001805461075b90610da1565b80601f016020809104026020016040519081016040528092919081815260200182805461078790610da1565b80156107d45780601f106107a9576101008083540402835291602001916107d4565b820191906000526020600020905b8154815290600101906020018083116107b757829003601f168201915b50505050508152602001906001019061073c565b601b546040516334c29b2160e21b8152600a600482015261033d916001600160a01b03169063d30a6c84906024016102f5565b60008054610100900460ff161561083b5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109415760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916108c9917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610ddb565b60408051601f19818403018152908290526108e391610e0c565b6000604051808303816000865af19150503d8060008114610920576040519150601f19603f3d011682016040523d82523d6000602084013e610925565b606091505b509150508080602001905181019061093d9190610e28565b9150505b919050565b6060600c8054806020026020016040519081016040528092919081815260200182805480156102bc576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161029e575050505050905090565b808214610acd577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610a179060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610acd610ad1565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610bcc5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610b6b9291602001610ddb565b60408051601f1981840301815290829052610b8591610e0c565b6000604051808303816000865af19150503d8060008114610bc2576040519150601f19603f3d011682016040523d82523d6000602084013e610bc7565b606091505b505050505b6000805461ff001916610100179055565b6101bd80610e5283390190565b6020808252825182820181905260009190848201906040850190845b81811015610c2b5783516001600160a01b031683529284019291840191600101610c06565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610cdb57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610cc65783516001600160e01b0319168252928b019260019290920191908b0190610c9c565b50978a01979550505091870191600101610c5f565b50919998505050505050505050565b60005b83811015610d05578181015183820152602001610ced565b50506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610d7b57878503603f1901845281518051808752610d5c818989018a8501610cea565b601f01601f191695909501860194509285019290850190600101610d35565b5092979650505050505050565b600060208284031215610d9a57600080fd5b5051919050565b600181811c90821680610db557607f821691505b602082108103610dd557634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610dfe816004850160208701610cea565b919091016004019392505050565b60008251610e1e818460208701610cea565b9190910192915050565b600060208284031215610e3a57600080fd5b81518015158114610e4a57600080fd5b939250505056fe608060405234801561001057600080fd5b506040516101bd3803806101bd83398101604081905261002f91610037565b600055610050565b60006020828403121561004957600080fd5b5051919050565b61015e8061005f6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063d30a6c8414610046578063e1967eae1461006b578063ef9fc50b14610074575b600080fd5b6100596100543660046100ad565b610087565b60405190815260200160405180910390f35b61005960005481565b6100596100823660046100c6565b61009a565b60006100948260026100fe565b92915050565b60006100a68284610115565b9392505050565b6000602082840312156100bf57600080fd5b5035919050565b600080604083850312156100d957600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610094576100946100e8565b80820180821115610094576100946100e856fea26469706673582212208278fefc8ce141093a7da6eec4c80b96aea63461f6949a0666b6842b90e5e22164736f6c63430008150033a264697066735822122091d27c85f1b416798371d3beda386c06ab8ece06dc0cf9ba4229460340bcce4864736f6c63430008150033",
    "sourceMap": "452:1814:19:-:0;;;1572:26:0;;;1594:4;-1:-1:-1;;1572:26:0;;;;;;;;3126:44:3;;;;;;;;;;;452:1814:19;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c806385226c81116100a2578063ba414fa611610071578063ba414fa6146101a2578063e0ab58b4146101ba578063e20c9f71146101e5578063e42429ae146101ed578063fa7626d41461020457600080fd5b806385226c8114610175578063916a17c61461018a578063b5508aa914610192578063b7c86b171461019a57600080fd5b80633f7286f4116100de5780633f7286f4146101485780635715703e1461015057806366d9a9a01461015857806369c113e11461016d57600080fd5b80630a9254e4146101105780631ed7831c1461011a5780632373fe64146101385780633e5e3c2314610140575b600080fd5b610118610211565b005b610122610264565b60405161012f9190610bea565b60405180910390f35b6101186102c6565b61012261033f565b61012261039f565b6101186103ff565b610160610439565b60405161012f9190610c37565b610118610528565b61017d610562565b60405161012f9190610d0e565b610160610632565b61017d610718565b6101186107e8565b6101aa61081b565b604051901515815260200161012f565b601b546101cd906001600160a01b031681565b6040516001600160a01b03909116815260200161012f565b610122610946565b6101f6601c5481565b60405190815260200161012f565b6000546101aa9060ff1681565b600a60405161021f90610bdd565b908152602001604051809103906000f080158015610241573d6000803e3d6000fd5b50601b80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600d8054806020026020016040519081016040528092919081815260200182805480156102bc57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161029e575b5050505050905090565b601b546040516334c29b2160e21b81526005600482015261033d916001600160a01b03169063d30a6c84906024015b602060405180830381865afa158015610312573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103369190610d88565b60146109a6565b565b6060600f8054806020026020016040519081016040528092919081815260200182805480156102bc576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161029e575050505050905090565b6060600e8054806020026020016040519081016040528092919081815260200182805480156102bc576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161029e575050505050905090565b601b5460405163ef9fc50b60e01b8152600560048201819052602482015261033d916001600160a01b03169063ef9fc50b906044016102f5565b60606012805480602002602001604051908101604052809291908181526020016000905b8282101561051f5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561050757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104c95790505b5050505050815250508152602001906001019061045d565b50505050905090565b601b5460405163ef9fc50b60e01b8152600a60048201819052602482015261033d916001600160a01b03169063ef9fc50b906044016102f5565b60606011805480602002602001604051908101604052809291908181526020016000905b8282101561051f5783829060005260206000200180546105a590610da1565b80601f01602080910402602001604051908101604052809291908181526020018280546105d190610da1565b801561061e5780601f106105f35761010080835404028352916020019161061e565b820191906000526020600020905b81548152906001019060200180831161060157829003601f168201915b505050505081526020019060010190610586565b60606013805480602002602001604051908101604052809291908181526020016000905b8282101561051f5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561070057602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106c25790505b50505050508152505081526020019060010190610656565b60606010805480602002602001604051908101604052809291908181526020016000905b8282101561051f57838290600052602060002001805461075b90610da1565b80601f016020809104026020016040519081016040528092919081815260200182805461078790610da1565b80156107d45780601f106107a9576101008083540402835291602001916107d4565b820191906000526020600020905b8154815290600101906020018083116107b757829003601f168201915b50505050508152602001906001019061073c565b601b546040516334c29b2160e21b8152600a600482015261033d916001600160a01b03169063d30a6c84906024016102f5565b60008054610100900460ff161561083b5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109415760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916108c9917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610ddb565b60408051601f19818403018152908290526108e391610e0c565b6000604051808303816000865af19150503d8060008114610920576040519150601f19603f3d011682016040523d82523d6000602084013e610925565b606091505b509150508080602001905181019061093d9190610e28565b9150505b919050565b6060600c8054806020026020016040519081016040528092919081815260200182805480156102bc576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161029e575050505050905090565b808214610acd577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610a179060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610acd610ad1565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610bcc5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610b6b9291602001610ddb565b60408051601f1981840301815290829052610b8591610e0c565b6000604051808303816000865af19150503d8060008114610bc2576040519150601f19603f3d011682016040523d82523d6000602084013e610bc7565b606091505b505050505b6000805461ff001916610100179055565b6101bd80610e5283390190565b6020808252825182820181905260009190848201906040850190845b81811015610c2b5783516001600160a01b031683529284019291840191600101610c06565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610cdb57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610cc65783516001600160e01b0319168252928b019260019290920191908b0190610c9c565b50978a01979550505091870191600101610c5f565b50919998505050505050505050565b60005b83811015610d05578181015183820152602001610ced565b50506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610d7b57878503603f1901845281518051808752610d5c818989018a8501610cea565b601f01601f191695909501860194509285019290850190600101610d35565b5092979650505050505050565b600060208284031215610d9a57600080fd5b5051919050565b600181811c90821680610db557607f821691505b602082108103610dd557634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b0319831681528151600090610dfe816004850160208701610cea565b919091016004019392505050565b60008251610e1e818460208701610cea565b9190910192915050565b600060208284031215610e3a57600080fd5b81518015158114610e4a57600080fd5b939250505056fe608060405234801561001057600080fd5b506040516101bd3803806101bd83398101604081905261002f91610037565b600055610050565b60006020828403121561004957600080fd5b5051919050565b61015e8061005f6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063d30a6c8414610046578063e1967eae1461006b578063ef9fc50b14610074575b600080fd5b6100596100543660046100ad565b610087565b60405190815260200160405180910390f35b61005960005481565b6100596100823660046100c6565b61009a565b60006100948260026100fe565b92915050565b60006100a68284610115565b9392505050565b6000602082840312156100bf57600080fd5b5035919050565b600080604083850312156100d957600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610094576100946100e8565b80820180821115610094576100946100e856fea26469706673582212208278fefc8ce141093a7da6eec4c80b96aea63461f6949a0666b6842b90e5e22164736f6c63430008150033a264697066735822122091d27c85f1b416798371d3beda386c06ab8ece06dc0cf9ba4229460340bcce4864736f6c63430008150033",
    "sourceMap": "452:1814:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;984:72;;;:::i;:::-;;2170:134:6;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2167:97:19;;;:::i;2939:133:6:-;;;:::i;2640:141::-;;;:::i;1847:96:19:-;;;:::i;2456:178:6:-;;;:::i;:::-;;;;;;;:::i;1532:89:19:-;;;:::i;2310:140:6:-;;;:::i;:::-;;;;;;;:::i;2787:146::-;;;:::i;1875:141::-;;;:::i;1247:94:19:-;;;:::i;1819:584:0:-;;;:::i;:::-;;;3688:14:20;;3681:22;3663:41;;3651:2;3636:18;1819:584:0;3523:187:20;651:28:19;;;;;-1:-1:-1;;;;;651:28:19;;;;;;-1:-1:-1;;;;;3899:32:20;;;3881:51;;3869:2;3854:18;651:28:19;3715:223:20;2022:142:6;;;:::i;808:27:19:-;;;;;;;;;4089:25:20;;;4077:2;4062:18;808:27:19;3943:177:20;1572:26:0;;;;;;;;;984:72:19;1046:2;1031:18;;;;;:::i;:::-;4089:25:20;;;4077:2;4062:18;1031::19;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1018:10:19;:31;;-1:-1:-1;;;;;;1018:31:19;-1:-1:-1;;;;;1018:31:19;;;;;;;;;;984:72::o;2170:134:6:-;2217:33;2281:16;2262:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2262:35:6;;;;;;;;;;;;;;;;;;;;;;;2170:134;:::o;2167:97:19:-;2226:10;;:26;;-1:-1:-1;;;2226:26:19;;2250:1;2226:26;;;4089:25:20;2217:40:19;;-1:-1:-1;;;;;2226:10:19;;:23;;4062:18:20;;2226:26:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2254:2;2217:8;:40::i;:::-;2167:97::o;2939:133:6:-;2985:33;3049:16;3030:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3030:35:6;;;;;;;;;;;;;;;;;;;;;;2939:133;:::o;2640:141::-;2688:35;2756:18;2735:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2735:39:6;;;;;;;;;;;;;;;;;;;;;;2640:141;:::o;1847:96:19:-;1904:10;;:27;;-1:-1:-1;;;1904:27:19;;1926:1;1904:27;;;4885:25:20;;;4926:18;;;4919:34;1895:41:19;;-1:-1:-1;;;;;1904:10:19;;:21;;4858:18:20;;1904:27:19;4695:264:20;2456:178:6;2512:48;2601:26;2572:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2572:55:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2572:55:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2456:178;:::o;1532:89:19:-;1580:10;;:29;;-1:-1:-1;;;1580:29:19;;1602:2;1580:29;;;4885:25:20;;;4926:18;;;4919:34;1571:43:19;;-1:-1:-1;;;;;1580:10:19;;:21;;4858:18:20;;1580:29:19;4695:264:20;2310:140:6;2358:34;2425:18;2404:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2787:146;2835:40;2908:18;2887:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2887:39:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2887:39:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1875:141;1924:34;1991:18;1970:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1247:94:19;1302:10;;:27;;-1:-1:-1;;;1302:27:19;;1326:2;1302:27;;;4089:25:20;1293:41:19;;-1:-1:-1;;;;;1302:10:19;;:23;;4062:18:20;;1302:27:19;3943:177:20;1819:584:0;1853:4;1873:7;;;;;;;1869:528;;;-1:-1:-1;1903:7:0;;;;;;;;1819:584::o;1869:528::-;1941:17;2997:42;2985:55;3066:16;1980:374;;2196:43;;;1671:64;2196:43;;;5794:51:20;;;-1:-1:-1;;;5861:18:20;;;5854:34;2196:43:0;;;;;;;;;5767:18:20;;;2196:43:0;;;-1:-1:-1;;1671:64:0;;2086:175;;2135:34;;2086:175;;;:::i;:::-;;;;-1:-1:-1;;2086:175:0;;;;;;;;;;2047:232;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2020:259;;;2323:7;2312:27;;;;;;;;;;;;:::i;:::-;2297:42;;2002:352;1980:374;2374:12;1819:584;-1:-1:-1;1819:584:0:o;2022:142:6:-;2071:35;2139:18;2118:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2118:39:6;;;;;;;;;;;;;;;;;;;;;;2022:142;:::o;5209:262:0:-;5271:1;5266;:6;5262:203;;5293:41;;;;;7064:2:20;7046:21;;;7103:2;7083:18;;;7076:30;7142:34;7137:2;7122:18;;7115:62;-1:-1:-1;;;7208:2:20;7193:18;;7186:32;7250:3;7235:19;;6862:398;5293:41:0;;;;;;;;5353:31;;;7477:21:20;;;7534:2;7514:18;;;7507:30;-1:-1:-1;;;7568:2:20;7553:18;;7546:40;7653:4;7638:20;;7631:36;;;5353:31:0;;;;;;;7618:3:20;5353:31:0;;;5403;;;7890:21:20;;;7947:2;7927:18;;;7920:30;-1:-1:-1;;;7981:2:20;7966:18;;7959:40;8066:4;8051:20;;8044:36;;;5403:31:0;;;;;;;8031:3:20;5403:31:0;;;5448:6;:4;:6::i;:::-;5209:262;;:::o;2409:432::-;2997:42;2985:55;3066:16;2452:359;;2652:67;;;1671:64;2652:67;;;8293:51:20;;;-1:-1:-1;;;8360:18:20;;;8353:34;;;;2712:4:0;8403:18:20;;;8396:34;2489:11:0;;1671:64;2586:43;;8266:18:20;;2652:67:0;;;-1:-1:-1;;2652:67:0;;;;;;;;;;2541:196;;;2652:67;2541:196;;:::i;:::-;;;;-1:-1:-1;;2541:196:0;;;;;;;;;;2506:245;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;2452:359:0;2820:7;:14;;-1:-1:-1;;2820:14:0;;;;;2409:432::o;-1:-1:-1:-;;;;;;;;:::o;14:658:20:-;185:2;237:21;;;307:13;;210:18;;;329:22;;;156:4;;185:2;408:15;;;;382:2;367:18;;;156:4;451:195;465:6;462:1;459:13;451:195;;;530:13;;-1:-1:-1;;;;;526:39:20;514:52;;621:15;;;;586:12;;;;562:1;480:9;451:195;;;-1:-1:-1;663:3:20;;14:658;-1:-1:-1;;;;;;14:658:20:o;677:1567::-;879:4;908:2;948;937:9;933:18;978:2;967:9;960:21;1001:6;1036;1030:13;1067:6;1059;1052:22;1093:2;1083:12;;1126:2;1115:9;1111:18;1104:25;;1188:2;1178:6;1175:1;1171:14;1160:9;1156:30;1152:39;1226:2;1218:6;1214:15;1247:1;1268;1278:937;1294:6;1289:3;1286:15;1278:937;;;1363:22;;;-1:-1:-1;;1359:36:20;1347:49;;1419:13;;1506:9;;-1:-1:-1;;;;;1502:35:20;1487:51;;1577:11;;1571:18;1609:15;;;1602:27;;;1690:19;;1459:15;;;1722:24;;;1812:21;;;;1857:1;;1780:2;1768:15;;;1871:236;1887:8;1882:3;1879:17;1871:236;;;1968:15;;-1:-1:-1;;;;;;1964:42:20;1950:57;;2076:17;;;;1915:1;1906:11;;;;;2033:14;;;;1871:236;;;-1:-1:-1;2193:12:20;;;;2130:5;-1:-1:-1;;;2158:15:20;;;;1320:1;1311:11;1278:937;;;-1:-1:-1;2232:6:20;;677:1567;-1:-1:-1;;;;;;;;;677:1567:20:o;2249:250::-;2334:1;2344:113;2358:6;2355:1;2352:13;2344:113;;;2434:11;;;2428:18;2415:11;;;2408:39;2380:2;2373:10;2344:113;;;-1:-1:-1;;2491:1:20;2473:16;;2466:27;2249:250::o;2504:1014::-;2666:4;2695:2;2735;2724:9;2720:18;2765:2;2754:9;2747:21;2788:6;2823;2817:13;2854:6;2846;2839:22;2892:2;2881:9;2877:18;2870:25;;2954:2;2944:6;2941:1;2937:14;2926:9;2922:30;2918:39;2904:53;;2992:2;2984:6;2980:15;3013:1;3023:466;3037:6;3034:1;3031:13;3023:466;;;3102:22;;;-1:-1:-1;;3098:36:20;3086:49;;3158:13;;3200:9;;3222:24;;;3259:74;3200:9;3307:15;;;3294:11;;;3259:74;:::i;:::-;3399:2;3376:17;-1:-1:-1;;3372:31:20;3360:44;;;;3356:53;;;-1:-1:-1;3467:12:20;;;;3432:15;;;;3059:1;3052:9;3023:466;;;-1:-1:-1;3506:6:20;;2504:1014;-1:-1:-1;;;;;;;2504:1014:20:o;4506:184::-;4576:6;4629:2;4617:9;4608:7;4604:23;4600:32;4597:52;;;4645:1;4642;4635:12;4597:52;-1:-1:-1;4668:16:20;;4506:184;-1:-1:-1;4506:184:20:o;5235:380::-;5314:1;5310:12;;;;5357;;;5378:61;;5432:4;5424:6;5420:17;5410:27;;5378:61;5485:2;5477:6;5474:14;5454:18;5451:38;5448:161;;5531:10;5526:3;5522:20;5519:1;5512:31;5566:4;5563:1;5556:15;5594:4;5591:1;5584:15;5448:161;;5235:380;;;:::o;5899:384::-;-1:-1:-1;;;;;;6084:33:20;;6072:46;;6141:13;;6054:3;;6163:74;6141:13;6226:1;6217:11;;6210:4;6198:17;;6163:74;:::i;:::-;6257:16;;;;6275:1;6253:24;;5899:384;-1:-1:-1;;;5899:384:20:o;6288:287::-;6417:3;6455:6;6449:13;6471:66;6530:6;6525:3;6518:4;6510:6;6506:17;6471:66;:::i;:::-;6553:16;;;;;6288:287;-1:-1:-1;;6288:287:20:o;6580:277::-;6647:6;6700:2;6688:9;6679:7;6675:23;6671:32;6668:52;;;6716:1;6713;6706:12;6668:52;6748:9;6742:16;6801:5;6794:13;6787:21;6780:5;6777:32;6767:60;;6823:1;6820;6813:12;6767:60;6846:5;6580:277;-1:-1:-1;;;6580:277:20:o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "IS_TEST()": "fa7626d4",
    "addNumbers()": "69c113e1",
    "excludeArtifacts()": "b5508aa9",
    "excludeContracts()": "e20c9f71",
    "excludeSenders()": "1ed7831c",
    "failed()": "ba414fa6",
    "setUp()": "0a9254e4",
    "simpleMath()": "e0ab58b4",
    "targetArtifactSelectors()": "66d9a9a0",
    "targetArtifacts()": "85226c81",
    "targetContracts()": "3f7286f4",
    "targetSelectors()": "916a17c6",
    "targetSenders()": "3e5e3c23",
    "testFail_addNumbers()": "5715703e",
    "testFail_doubleNumber()": "2373fe64",
    "testVariable()": "e42429ae",
    "test_doubleNumber()": "b7c86b17"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"simpleMath\",\"outputs\":[{\"internalType\":\"contract SimpleMath\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testFail_addNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testFail_doubleNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_doubleNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addNumbers()\":{\"details\":\"Calls the addNumbers function with 10 and 10, then asserts that the returned value is 20.\"},\"setUp()\":{\"details\":\"Deploys a new SimpleMath contract with an initial value of 10.\"},\"testFail_addNumbers()\":{\"details\":\"Calls the addNumbers function with 5 and 5, then asserts that the returned value is 20 (which should fail).\"},\"testFail_doubleNumber()\":{\"details\":\"Calls the doubleNumber function with 5, then asserts that the returned value is 20 (which should fail).\"},\"test_doubleNumber()\":{\"details\":\"Calls the doubleNumber function with 10 and then asserts that the returned value is 20.\"}},\"stateVariables\":{\"simpleMath\":{\"details\":\"A new SimpleMath contract is deployed in the setUp function before each test.\"},\"testVariable\":{\"details\":\"Currently not used in any of the test functions.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addNumbers()\":{\"notice\":\"Test case for the addNumbers function in the SimpleMath contract.\"},\"setUp()\":{\"notice\":\"Sets up the testing environment before each test.\"},\"simpleMath()\":{\"notice\":\"The SimpleMath contract instance that will be tested.\"},\"testFail_addNumbers()\":{\"notice\":\"Test case expected to fail for the addNumbers function in the SimpleMath contract.\"},\"testFail_doubleNumber()\":{\"notice\":\"Test case expected to fail for the doubleNumber function in the SimpleMath contract.\"},\"testVariable()\":{\"notice\":\"A test variable for potential use in tests.\"},\"test_doubleNumber()\":{\"notice\":\"Test case for the doubleNumber function in the SimpleMath contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/SimpleMath.t.sol\":\"SimpleMathTest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/=node_modules/@chainlink/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/forge-std/lib/ds-test/src/test.sol\":{\"keccak256\":\"0x8758531bbac3972efcf1fa46383dbe1d276406fe527bc7abb2f236486278e83b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://1f64264d61506847acf8761e84aff690cebe830958eac00bac7924d8be569240\",\"dweb:/ipfs/QmSekDJvJ82MZAmr63n7YvfLzQ7gS4NLSHPmHL3GN3rw8k\"]},\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x1a0dee4d8b2c81e9318e87dd85ef009467ebf7dba6575530d1fce94d34dbae60\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ddd790c86ddde1013d1f7a552a80168eacf2e9244077f96799180644ad523a5b\",\"dweb:/ipfs/QmYinBFt9uEVFXP9ytT9CDoNpzWieQVgLWRFRNiypMzJaL\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x51e6eb138fc953fac1ac78012a39b3f16d9289ce06a222ba93bb0621768f96e6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://653c577e054cf578594148a07b286571d494f401b6d4a940d3ccabd47b29233d\",\"dweb:/ipfs/QmTWDVvR4m82MGXWYY8BCaVN89TguQJSLqRgzHzrMkFHtx\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0x2e1b4b99283c16efaf155f7e55ea357943cf6e61fc02aad060534349f63b6cd5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d471a35903e8a367a145ca5b5955caf691c723fe1117c6dcffd928d9f8d7c95a\",\"dweb:/ipfs/QmXGnFUGiX9APL8xit7NZQEYBoEL3wWyW1YyFoJQd2pGPe\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0xf5762db8ef95099bbe77578cd9349511ed77f4dd63ec98cc6b7cd711447830c1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6b0360806a9804eac0f7e07492b5db9c4953c521dabb9a11b17dd610d5b804c\",\"dweb:/ipfs/QmUFozSt3W7drBRdm1cdRow61EABqSLJtkvYZXWmoHUPss\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x9e2a7521190c462a0667706385f1c52a816220a9813ca8ac520fba7ba45d660b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d23017fe6570b28130a731b86179352b93a5fb5af32f11559837afc1186293c\",\"dweb:/ipfs/QmR3p6zG5Kmcr8gKocFCSopLHfXv1AziPJbH17nKyMxwxV\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0x391a28a2e54aea51a6fb03a3a48035304ca4d24bc669ddf3d4c152c7162e514d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://475fd0d87ccb0fdc4418dea2babffb4adb4aafb817e61f7ef31c2303f10c6c26\",\"dweb:/ipfs/QmQgcgtZxpkW6DRmbJszN1F8mU6zhaTZGdWWsj77yCuWN9\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x8758c42ba9d9e46868b796e2330ac239006ede07bd438a4b36dd6f2c47d27dc1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11f5752e0187b1e3631b875efdbe05d45929d05f1c1717105a9115d0a6628140\",\"dweb:/ipfs/QmUKkx9jfsUvjyYBw45RvrW1hTFXDXi2Jv5tbHP86mnzpi\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0xf3b62c75cea11a0e8ef8e6526e5e5c74ae47a892b9bcefc0e98d76066e1ffd24\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a41faaf836453e02c71fc272c80b3c90a614b30c9ba636512db0d033c7b93beb\",\"dweb:/ipfs/QmeQAreYYaxztQtFLQdHCzCPEorj9T5foSu2hQmxk7xT5x\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0xb569d0b4398fad95f508fb854e832143edf69a897af4250f5f60fe195a2066c5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://84b722ada97ea7bb841cdc0fa556aa36a02ff2d380fa24f6dc0717a71c6d9c7c\",\"dweb:/ipfs/QmfCH9Q4tvJhPM286GFsE4UCP4YncLpRu4Nwa2ZkHdRfbw\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70\",\"dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973\",\"dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbaf41fdc6c54297e7cd8250e48b0f20eaac918e342a1028cef3f9a52ac086381\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a500ad81dea226f9910e6b50f99a9ff930105e393a692cbfb2185e4cdb4424ae\",\"dweb:/ipfs/QmVbUQpXNMmMWRiy4FvBNczzq46BMGfUoBikvSHNiCxVTq\"]},\"src/SimpleMath.sol\":{\"keccak256\":\"0xf8785eb92069250d65f545cc0e496cb41c59dfc2b8441023530f1fa7b8c91225\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b8f82f26a587e2b6215ee6a5ac464d96246054576398e414b843e37894719e1\",\"dweb:/ipfs/Qmct3s1QM2YedZYmc2s8V8cA49Uzgie5HMuZGcaq7dSDeC\"]},\"test/SimpleMath.t.sol\":{\"keccak256\":\"0x90b0b3f4144e2cf039d96ffa2b8d247a6d8c2f793e910a7ef67ff7d32260e353\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8545f7f6be6fd2eab699032bf786452056082a59efd0dd514d3135f1046eb9aa\",\"dweb:/ipfs/Qmecc9sPsb8fL8vC2EuHJmTKri8pEwgp3wzsXeXhyMjf7q\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.21+commit.d9974bed"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_address",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "val",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "int256[]",
              "name": "val",
              "type": "int256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "val",
              "type": "address[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_bytes",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_bytes32",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "int256",
              "name": "",
              "type": "int256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "val",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_address",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "val",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256[]",
              "name": "val",
              "type": "int256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "address[]",
              "name": "val",
              "type": "address[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "val",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_bytes",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes32",
              "name": "val",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_bytes32",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256",
              "name": "val",
              "type": "int256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_decimal_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "val",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_decimal_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256",
              "name": "val",
              "type": "int256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "val",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_string",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "val",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_string",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "logs",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "IS_TEST",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addNumbers"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "excludeArtifacts",
          "outputs": [
            {
              "internalType": "string[]",
              "name": "excludedArtifacts_",
              "type": "string[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "excludeContracts",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "excludedContracts_",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "excludeSenders",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "excludedSenders_",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "failed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setUp"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "simpleMath",
          "outputs": [
            {
              "internalType": "contract SimpleMath",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "targetArtifactSelectors",
          "outputs": [
            {
              "internalType": "struct StdInvariant.FuzzSelector[]",
              "name": "targetedArtifactSelectors_",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes4[]",
                  "name": "selectors",
                  "type": "bytes4[]"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "targetArtifacts",
          "outputs": [
            {
              "internalType": "string[]",
              "name": "targetedArtifacts_",
              "type": "string[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "targetContracts",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "targetedContracts_",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "targetSelectors",
          "outputs": [
            {
              "internalType": "struct StdInvariant.FuzzSelector[]",
              "name": "targetedSelectors_",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes4[]",
                  "name": "selectors",
                  "type": "bytes4[]"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "targetSenders",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "targetedSenders_",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "testFail_addNumbers"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "testFail_doubleNumber"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "testVariable",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "test_doubleNumber"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "addNumbers()": {
            "details": "Calls the addNumbers function with 10 and 10, then asserts that the returned value is 20."
          },
          "setUp()": {
            "details": "Deploys a new SimpleMath contract with an initial value of 10."
          },
          "testFail_addNumbers()": {
            "details": "Calls the addNumbers function with 5 and 5, then asserts that the returned value is 20 (which should fail)."
          },
          "testFail_doubleNumber()": {
            "details": "Calls the doubleNumber function with 5, then asserts that the returned value is 20 (which should fail)."
          },
          "test_doubleNumber()": {
            "details": "Calls the doubleNumber function with 10 and then asserts that the returned value is 20."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "addNumbers()": {
            "notice": "Test case for the addNumbers function in the SimpleMath contract."
          },
          "setUp()": {
            "notice": "Sets up the testing environment before each test."
          },
          "simpleMath()": {
            "notice": "The SimpleMath contract instance that will be tested."
          },
          "testFail_addNumbers()": {
            "notice": "Test case expected to fail for the addNumbers function in the SimpleMath contract."
          },
          "testFail_doubleNumber()": {
            "notice": "Test case expected to fail for the doubleNumber function in the SimpleMath contract."
          },
          "testVariable()": {
            "notice": "A test variable for potential use in tests."
          },
          "test_doubleNumber()": {
            "notice": "Test case for the doubleNumber function in the SimpleMath contract."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=node_modules/@chainlink/",
        "@openzeppelin/=node_modules/@openzeppelin/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "forge-std/=lib/forge-std/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "test/SimpleMath.t.sol": "SimpleMathTest"
      },
      "libraries": {}
    },
    "sources": {
      "lib/forge-std/lib/ds-test/src/test.sol": {
        "keccak256": "0x8758531bbac3972efcf1fa46383dbe1d276406fe527bc7abb2f236486278e83b",
        "urls": [
          "bzz-raw://1f64264d61506847acf8761e84aff690cebe830958eac00bac7924d8be569240",
          "dweb:/ipfs/QmSekDJvJ82MZAmr63n7YvfLzQ7gS4NLSHPmHL3GN3rw8k"
        ],
        "license": "GPL-3.0-or-later"
      },
      "lib/forge-std/src/Base.sol": {
        "keccak256": "0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c",
        "urls": [
          "bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224",
          "dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/StdAssertions.sol": {
        "keccak256": "0x1a0dee4d8b2c81e9318e87dd85ef009467ebf7dba6575530d1fce94d34dbae60",
        "urls": [
          "bzz-raw://ddd790c86ddde1013d1f7a552a80168eacf2e9244077f96799180644ad523a5b",
          "dweb:/ipfs/QmYinBFt9uEVFXP9ytT9CDoNpzWieQVgLWRFRNiypMzJaL"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/StdChains.sol": {
        "keccak256": "0x51e6eb138fc953fac1ac78012a39b3f16d9289ce06a222ba93bb0621768f96e6",
        "urls": [
          "bzz-raw://653c577e054cf578594148a07b286571d494f401b6d4a940d3ccabd47b29233d",
          "dweb:/ipfs/QmTWDVvR4m82MGXWYY8BCaVN89TguQJSLqRgzHzrMkFHtx"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/StdCheats.sol": {
        "keccak256": "0x2e1b4b99283c16efaf155f7e55ea357943cf6e61fc02aad060534349f63b6cd5",
        "urls": [
          "bzz-raw://d471a35903e8a367a145ca5b5955caf691c723fe1117c6dcffd928d9f8d7c95a",
          "dweb:/ipfs/QmXGnFUGiX9APL8xit7NZQEYBoEL3wWyW1YyFoJQd2pGPe"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/StdError.sol": {
        "keccak256": "0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77",
        "urls": [
          "bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6",
          "dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/StdInvariant.sol": {
        "keccak256": "0xf5762db8ef95099bbe77578cd9349511ed77f4dd63ec98cc6b7cd711447830c1",
        "urls": [
          "bzz-raw://a6b0360806a9804eac0f7e07492b5db9c4953c521dabb9a11b17dd610d5b804c",
          "dweb:/ipfs/QmUFozSt3W7drBRdm1cdRow61EABqSLJtkvYZXWmoHUPss"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/StdJson.sol": {
        "keccak256": "0x9e2a7521190c462a0667706385f1c52a816220a9813ca8ac520fba7ba45d660b",
        "urls": [
          "bzz-raw://7d23017fe6570b28130a731b86179352b93a5fb5af32f11559837afc1186293c",
          "dweb:/ipfs/QmR3p6zG5Kmcr8gKocFCSopLHfXv1AziPJbH17nKyMxwxV"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/StdMath.sol": {
        "keccak256": "0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2",
        "urls": [
          "bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92",
          "dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/StdStorage.sol": {
        "keccak256": "0x391a28a2e54aea51a6fb03a3a48035304ca4d24bc669ddf3d4c152c7162e514d",
        "urls": [
          "bzz-raw://475fd0d87ccb0fdc4418dea2babffb4adb4aafb817e61f7ef31c2303f10c6c26",
          "dweb:/ipfs/QmQgcgtZxpkW6DRmbJszN1F8mU6zhaTZGdWWsj77yCuWN9"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/StdStyle.sol": {
        "keccak256": "0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d",
        "urls": [
          "bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8",
          "dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/StdUtils.sol": {
        "keccak256": "0x8758c42ba9d9e46868b796e2330ac239006ede07bd438a4b36dd6f2c47d27dc1",
        "urls": [
          "bzz-raw://11f5752e0187b1e3631b875efdbe05d45929d05f1c1717105a9115d0a6628140",
          "dweb:/ipfs/QmUKkx9jfsUvjyYBw45RvrW1hTFXDXi2Jv5tbHP86mnzpi"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/Test.sol": {
        "keccak256": "0xf3b62c75cea11a0e8ef8e6526e5e5c74ae47a892b9bcefc0e98d76066e1ffd24",
        "urls": [
          "bzz-raw://a41faaf836453e02c71fc272c80b3c90a614b30c9ba636512db0d033c7b93beb",
          "dweb:/ipfs/QmeQAreYYaxztQtFLQdHCzCPEorj9T5foSu2hQmxk7xT5x"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/Vm.sol": {
        "keccak256": "0xb569d0b4398fad95f508fb854e832143edf69a897af4250f5f60fe195a2066c5",
        "urls": [
          "bzz-raw://84b722ada97ea7bb841cdc0fa556aa36a02ff2d380fa24f6dc0717a71c6d9c7c",
          "dweb:/ipfs/QmfCH9Q4tvJhPM286GFsE4UCP4YncLpRu4Nwa2ZkHdRfbw"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/console.sol": {
        "keccak256": "0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba",
        "urls": [
          "bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70",
          "dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/console2.sol": {
        "keccak256": "0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea",
        "urls": [
          "bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973",
          "dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/interfaces/IMulticall3.sol": {
        "keccak256": "0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a",
        "urls": [
          "bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0",
          "dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/safeconsole.sol": {
        "keccak256": "0xbaf41fdc6c54297e7cd8250e48b0f20eaac918e342a1028cef3f9a52ac086381",
        "urls": [
          "bzz-raw://a500ad81dea226f9910e6b50f99a9ff930105e393a692cbfb2185e4cdb4424ae",
          "dweb:/ipfs/QmVbUQpXNMmMWRiy4FvBNczzq46BMGfUoBikvSHNiCxVTq"
        ],
        "license": "MIT"
      },
      "src/SimpleMath.sol": {
        "keccak256": "0xf8785eb92069250d65f545cc0e496cb41c59dfc2b8441023530f1fa7b8c91225",
        "urls": [
          "bzz-raw://9b8f82f26a587e2b6215ee6a5ac464d96246054576398e414b843e37894719e1",
          "dweb:/ipfs/Qmct3s1QM2YedZYmc2s8V8cA49Uzgie5HMuZGcaq7dSDeC"
        ],
        "license": "MIT"
      },
      "test/SimpleMath.t.sol": {
        "keccak256": "0x90b0b3f4144e2cf039d96ffa2b8d247a6d8c2f793e910a7ef67ff7d32260e353",
        "urls": [
          "bzz-raw://8545f7f6be6fd2eab699032bf786452056082a59efd0dd514d3135f1046eb9aa",
          "dweb:/ipfs/Qmecc9sPsb8fL8vC2EuHJmTKri8pEwgp3wzsXeXhyMjf7q"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "test/SimpleMath.t.sol",
    "id": 42977,
    "exportedSymbols": {
      "DSTest": [
        2291
      ],
      "SimpleMath": [
        42894
      ],
      "SimpleMathTest": [
        42976
      ],
      "StdAssertions": [
        3784
      ],
      "StdChains": [
        4477
      ],
      "StdCheats": [
        7295
      ],
      "StdInvariant": [
        7585
      ],
      "StdStorage": [
        8335
      ],
      "StdStyle": [
        10999
      ],
      "StdUtils": [
        11847
      ],
      "Test": [
        11898
      ],
      "TestBase": [
        2357
      ],
      "Vm": [
        13425
      ],
      "console": [
        21489
      ],
      "console2": [
        29614
      ],
      "safeconsole": [
        42852
      ],
      "stdError": [
        7361
      ],
      "stdJson": [
        8161
      ],
      "stdMath": [
        8303
      ],
      "stdStorage": [
        9788
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:2235:19",
    "nodes": [
      {
        "id": 42896,
        "nodeType": "PragmaDirective",
        "src": "32:24:19",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".10"
        ]
      },
      {
        "id": 42897,
        "nodeType": "ImportDirective",
        "src": "372:28:19",
        "nodes": [],
        "absolutePath": "lib/forge-std/src/Test.sol",
        "file": "forge-std/Test.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 42977,
        "sourceUnit": 11899,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 42899,
        "nodeType": "ImportDirective",
        "src": "401:49:19",
        "nodes": [],
        "absolutePath": "src/SimpleMath.sol",
        "file": "../src/SimpleMath.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 42977,
        "sourceUnit": 42895,
        "symbolAliases": [
          {
            "foreign": {
              "id": 42898,
              "name": "SimpleMath",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 42894,
              "src": "409:10:19",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 42976,
        "nodeType": "ContractDefinition",
        "src": "452:1814:19",
        "nodes": [
          {
            "id": 42905,
            "nodeType": "VariableDeclaration",
            "src": "651:28:19",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 42902,
              "nodeType": "StructuredDocumentation",
              "src": "490:156:19",
              "text": "@notice The SimpleMath contract instance that will be tested.\n @dev A new SimpleMath contract is deployed in the setUp function before each test."
            },
            "functionSelector": "e0ab58b4",
            "mutability": "mutable",
            "name": "simpleMath",
            "nameLocation": "669:10:19",
            "scope": 42976,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_SimpleMath_$42894",
              "typeString": "contract SimpleMath"
            },
            "typeName": {
              "id": 42904,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 42903,
                "name": "SimpleMath",
                "nameLocations": [
                  "651:10:19"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 42894,
                "src": "651:10:19"
              },
              "referencedDeclaration": 42894,
              "src": "651:10:19",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SimpleMath_$42894",
                "typeString": "contract SimpleMath"
              }
            },
            "visibility": "public"
          },
          {
            "id": 42908,
            "nodeType": "VariableDeclaration",
            "src": "808:27:19",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 42906,
              "nodeType": "StructuredDocumentation",
              "src": "686:117:19",
              "text": "@notice A test variable for potential use in tests.\n @dev Currently not used in any of the test functions."
            },
            "functionSelector": "e42429ae",
            "mutability": "mutable",
            "name": "testVariable",
            "nameLocation": "823:12:19",
            "scope": 42976,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 42907,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "808:7:19",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "id": 42921,
            "nodeType": "FunctionDefinition",
            "src": "984:72:19",
            "nodes": [],
            "body": {
              "id": 42920,
              "nodeType": "Block",
              "src": "1008:48:19",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 42918,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 42912,
                      "name": "simpleMath",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 42905,
                      "src": "1018:10:19",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_SimpleMath_$42894",
                        "typeString": "contract SimpleMath"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "hexValue": "3130",
                          "id": 42916,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1046:2:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          },
                          "value": "10"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          }
                        ],
                        "id": 42915,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "1031:14:19",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$_t_uint256_$returns$_t_contract$_SimpleMath_$42894_$",
                          "typeString": "function (uint256) returns (contract SimpleMath)"
                        },
                        "typeName": {
                          "id": 42914,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 42913,
                            "name": "SimpleMath",
                            "nameLocations": [
                              "1035:10:19"
                            ],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 42894,
                            "src": "1035:10:19"
                          },
                          "referencedDeclaration": 42894,
                          "src": "1035:10:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_SimpleMath_$42894",
                            "typeString": "contract SimpleMath"
                          }
                        }
                      },
                      "id": 42917,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1031:18:19",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_SimpleMath_$42894",
                        "typeString": "contract SimpleMath"
                      }
                    },
                    "src": "1018:31:19",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_SimpleMath_$42894",
                      "typeString": "contract SimpleMath"
                    }
                  },
                  "id": 42919,
                  "nodeType": "ExpressionStatement",
                  "src": "1018:31:19"
                }
              ]
            },
            "documentation": {
              "id": 42909,
              "nodeType": "StructuredDocumentation",
              "src": "842:137:19",
              "text": "@notice Sets up the testing environment before each test.\n @dev Deploys a new SimpleMath contract with an initial value of 10."
            },
            "functionSelector": "0a9254e4",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setUp",
            "nameLocation": "993:5:19",
            "parameters": {
              "id": 42910,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "998:2:19"
            },
            "returnParameters": {
              "id": 42911,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1008:0:19"
            },
            "scope": 42976,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 42934,
            "nodeType": "FunctionDefinition",
            "src": "1247:94:19",
            "nodes": [],
            "body": {
              "id": 42933,
              "nodeType": "Block",
              "src": "1283:58:19",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "3130",
                            "id": 42928,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1326:2:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_10_by_1",
                              "typeString": "int_const 10"
                            },
                            "value": "10"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_10_by_1",
                              "typeString": "int_const 10"
                            }
                          ],
                          "expression": {
                            "id": 42926,
                            "name": "simpleMath",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 42905,
                            "src": "1302:10:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_SimpleMath_$42894",
                              "typeString": "contract SimpleMath"
                            }
                          },
                          "id": 42927,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1313:12:19",
                          "memberName": "doubleNumber",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 42879,
                          "src": "1302:23:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_pure$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (uint256) pure external returns (uint256)"
                          }
                        },
                        "id": 42929,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1302:27:19",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "3230",
                        "id": 42930,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1331:2:19",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_20_by_1",
                          "typeString": "int_const 20"
                        },
                        "value": "20"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_rational_20_by_1",
                          "typeString": "int_const 20"
                        }
                      ],
                      "id": 42925,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        2485,
                        2510,
                        2523,
                        2539,
                        2581,
                        2623,
                        2665,
                        2702,
                        2739,
                        2776,
                        320,
                        345,
                        375,
                        400,
                        459,
                        484,
                        514,
                        539,
                        2012,
                        2047
                      ],
                      "referencedDeclaration": 514,
                      "src": "1293:8:19",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256)"
                      }
                    },
                    "id": 42931,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1293:41:19",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 42932,
                  "nodeType": "ExpressionStatement",
                  "src": "1293:41:19"
                }
              ]
            },
            "documentation": {
              "id": 42922,
              "nodeType": "StructuredDocumentation",
              "src": "1062:180:19",
              "text": "@notice Test case for the doubleNumber function in the SimpleMath contract.\n @dev Calls the doubleNumber function with 10 and then asserts that the returned value is 20."
            },
            "functionSelector": "b7c86b17",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "test_doubleNumber",
            "nameLocation": "1256:17:19",
            "parameters": {
              "id": 42923,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1273:2:19"
            },
            "returnParameters": {
              "id": 42924,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1283:0:19"
            },
            "scope": 42976,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 42948,
            "nodeType": "FunctionDefinition",
            "src": "1532:89:19",
            "nodes": [],
            "body": {
              "id": 42947,
              "nodeType": "Block",
              "src": "1561:60:19",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "3130",
                            "id": 42941,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1602:2:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_10_by_1",
                              "typeString": "int_const 10"
                            },
                            "value": "10"
                          },
                          {
                            "hexValue": "3130",
                            "id": 42942,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1606:2:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_10_by_1",
                              "typeString": "int_const 10"
                            },
                            "value": "10"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_10_by_1",
                              "typeString": "int_const 10"
                            },
                            {
                              "typeIdentifier": "t_rational_10_by_1",
                              "typeString": "int_const 10"
                            }
                          ],
                          "expression": {
                            "id": 42939,
                            "name": "simpleMath",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 42905,
                            "src": "1580:10:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_SimpleMath_$42894",
                              "typeString": "contract SimpleMath"
                            }
                          },
                          "id": 42940,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1591:10:19",
                          "memberName": "addNumbers",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 42893,
                          "src": "1580:21:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure external returns (uint256)"
                          }
                        },
                        "id": 42943,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1580:29:19",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "3230",
                        "id": 42944,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1611:2:19",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_20_by_1",
                          "typeString": "int_const 20"
                        },
                        "value": "20"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_rational_20_by_1",
                          "typeString": "int_const 20"
                        }
                      ],
                      "id": 42938,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        2485,
                        2510,
                        2523,
                        2539,
                        2581,
                        2623,
                        2665,
                        2702,
                        2739,
                        2776,
                        320,
                        345,
                        375,
                        400,
                        459,
                        484,
                        514,
                        539,
                        2012,
                        2047
                      ],
                      "referencedDeclaration": 514,
                      "src": "1571:8:19",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256)"
                      }
                    },
                    "id": 42945,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1571:43:19",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 42946,
                  "nodeType": "ExpressionStatement",
                  "src": "1571:43:19"
                }
              ]
            },
            "documentation": {
              "id": 42935,
              "nodeType": "StructuredDocumentation",
              "src": "1347:180:19",
              "text": "@notice Test case for the addNumbers function in the SimpleMath contract.\n @dev Calls the addNumbers function with 10 and 10, then asserts that the returned value is 20."
            },
            "functionSelector": "69c113e1",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addNumbers",
            "nameLocation": "1541:10:19",
            "parameters": {
              "id": 42936,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1551:2:19"
            },
            "returnParameters": {
              "id": 42937,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1561:0:19"
            },
            "scope": 42976,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 42962,
            "nodeType": "FunctionDefinition",
            "src": "1847:96:19",
            "nodes": [],
            "body": {
              "id": 42961,
              "nodeType": "Block",
              "src": "1885:58:19",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "35",
                            "id": 42955,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1926:1:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_5_by_1",
                              "typeString": "int_const 5"
                            },
                            "value": "5"
                          },
                          {
                            "hexValue": "35",
                            "id": 42956,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1929:1:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_5_by_1",
                              "typeString": "int_const 5"
                            },
                            "value": "5"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_5_by_1",
                              "typeString": "int_const 5"
                            },
                            {
                              "typeIdentifier": "t_rational_5_by_1",
                              "typeString": "int_const 5"
                            }
                          ],
                          "expression": {
                            "id": 42953,
                            "name": "simpleMath",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 42905,
                            "src": "1904:10:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_SimpleMath_$42894",
                              "typeString": "contract SimpleMath"
                            }
                          },
                          "id": 42954,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1915:10:19",
                          "memberName": "addNumbers",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 42893,
                          "src": "1904:21:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure external returns (uint256)"
                          }
                        },
                        "id": 42957,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1904:27:19",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "3230",
                        "id": 42958,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1933:2:19",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_20_by_1",
                          "typeString": "int_const 20"
                        },
                        "value": "20"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_rational_20_by_1",
                          "typeString": "int_const 20"
                        }
                      ],
                      "id": 42952,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        2485,
                        2510,
                        2523,
                        2539,
                        2581,
                        2623,
                        2665,
                        2702,
                        2739,
                        2776,
                        320,
                        345,
                        375,
                        400,
                        459,
                        484,
                        514,
                        539,
                        2012,
                        2047
                      ],
                      "referencedDeclaration": 514,
                      "src": "1895:8:19",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256)"
                      }
                    },
                    "id": 42959,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1895:41:19",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 42960,
                  "nodeType": "ExpressionStatement",
                  "src": "1895:41:19"
                }
              ]
            },
            "documentation": {
              "id": 42949,
              "nodeType": "StructuredDocumentation",
              "src": "1627:215:19",
              "text": "@notice Test case expected to fail for the addNumbers function in the SimpleMath contract.\n @dev Calls the addNumbers function with 5 and 5, then asserts that the returned value is 20 (which should fail)."
            },
            "functionSelector": "5715703e",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "testFail_addNumbers",
            "nameLocation": "1856:19:19",
            "parameters": {
              "id": 42950,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1875:2:19"
            },
            "returnParameters": {
              "id": 42951,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1885:0:19"
            },
            "scope": 42976,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 42975,
            "nodeType": "FunctionDefinition",
            "src": "2167:97:19",
            "nodes": [],
            "body": {
              "id": 42974,
              "nodeType": "Block",
              "src": "2207:57:19",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "35",
                            "id": 42969,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2250:1:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_5_by_1",
                              "typeString": "int_const 5"
                            },
                            "value": "5"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_5_by_1",
                              "typeString": "int_const 5"
                            }
                          ],
                          "expression": {
                            "id": 42967,
                            "name": "simpleMath",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 42905,
                            "src": "2226:10:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_SimpleMath_$42894",
                              "typeString": "contract SimpleMath"
                            }
                          },
                          "id": 42968,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2237:12:19",
                          "memberName": "doubleNumber",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 42879,
                          "src": "2226:23:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_pure$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (uint256) pure external returns (uint256)"
                          }
                        },
                        "id": 42970,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2226:26:19",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "3230",
                        "id": 42971,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2254:2:19",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_20_by_1",
                          "typeString": "int_const 20"
                        },
                        "value": "20"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_rational_20_by_1",
                          "typeString": "int_const 20"
                        }
                      ],
                      "id": 42966,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        2485,
                        2510,
                        2523,
                        2539,
                        2581,
                        2623,
                        2665,
                        2702,
                        2739,
                        2776,
                        320,
                        345,
                        375,
                        400,
                        459,
                        484,
                        514,
                        539,
                        2012,
                        2047
                      ],
                      "referencedDeclaration": 514,
                      "src": "2217:8:19",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256)"
                      }
                    },
                    "id": 42972,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2217:40:19",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 42973,
                  "nodeType": "ExpressionStatement",
                  "src": "2217:40:19"
                }
              ]
            },
            "documentation": {
              "id": 42963,
              "nodeType": "StructuredDocumentation",
              "src": "1949:213:19",
              "text": "@notice Test case expected to fail for the doubleNumber function in the SimpleMath contract.\n @dev Calls the doubleNumber function with 5, then asserts that the returned value is 20 (which should fail)."
            },
            "functionSelector": "2373fe64",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "testFail_doubleNumber",
            "nameLocation": "2176:21:19",
            "parameters": {
              "id": 42964,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2197:2:19"
            },
            "returnParameters": {
              "id": 42965,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2207:0:19"
            },
            "scope": 42976,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 42900,
              "name": "Test",
              "nameLocations": [
                "479:4:19"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 11898,
              "src": "479:4:19"
            },
            "id": 42901,
            "nodeType": "InheritanceSpecifier",
            "src": "479:4:19"
          }
        ],
        "canonicalName": "SimpleMathTest",
        "contractDependencies": [
          42894
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          42976,
          11898,
          2357,
          2354,
          11847,
          7585,
          7295,
          6531,
          4477,
          3784,
          2291
        ],
        "name": "SimpleMathTest",
        "nameLocation": "461:14:19",
        "scope": 42977,
        "usedErrors": [],
        "usedEvents": [
          5,
          9,
          13,
          17,
          21,
          25,
          29,
          33,
          39,
          45,
          53,
          61,
          67,
          73,
          79,
          85,
          2379,
          2384,
          2389,
          2396,
          2403,
          2410
        ]
      }
    ],
    "license": "MIT"
  },
  "id": 19
}